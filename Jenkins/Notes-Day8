> Maven introduction 

 $ sudo su -
 $ yum install maven -y
 $ mvn --version

> Jenkins Configure global tools


 >> go to manage jenkins---> global tool configuration

 > add JDK --> uncehck install automatically box

 > give name: myjava
 > JAVA_HOME -->  /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.312.b07-1.amzn2.0.2.x86_64


to get JAVA_HOME variable --> execute command on CLI  $ mvn --version


 > scroll down --> add maven
 > name: mymaven
 
 keep it checked install automatically box

Save all the changes


> Maven commands through jenkins

any developer who is writing the code using java will first build a project Maven project locally

developer will push the code as a maven project in github

who will create a maven project --> eclipse/intellij

  > src folder
    > src/main/java ===> source code will be present - java files
    > src/test/java ===> unit test cases/selenium test cases

  > pom.xml  ==> project object module.xml
   updated by the developer locally

   1. dependendcies
      > software/jar files/tools need for him/her to write the code
         > name
         > version
   2. plugin

     > add maven plugin that we will use for build process
        > name & version

Maven is a build tool

 > plugin based tool

 > 2 types of plugin in maven

  > core plugin/ build plugins

    > compile the code ==> maven plugin --> Compiler --> 

      Goal: is command to trigger compiliation the code with help of Compiler plugin
      
Goal in jenkins job : compile

a maven command locally : mvn compile

      test
      package
      deploy

  > reporting plugins

    > code review  ===> using the plugin called as pmd (programming mistake detector)

    the pmd rules for java are run on your source code so as to find programming mistakes done by developer

   > will generte a report ==> pmd.xml

Goal to trigger the plugin ==>  pmd:pmd
locally using mavel ==>  mvn pmd:pmd

    > code coverage
    > test reports



  5 individual job -- 
 in each job the process will be :

   > create a new job--> give a name 1.compile --> free style template
   > jenkins to clone the repo: https://github.com/Sonal0409/DevOpsClassCodes.git
   > SCM --> git--> give repo name
   > go to build --> select invoke top level maven target ---> 
     > maven version : mymaven
       goal : compile
   > execute the desired maven command to perform maven build step
   > save the job --> build job
   
   > code files will be in your workspace

   > compiled file will be in target folder


Job 2: Code Review


   > create a new job--> give a name 2.CodeReview --> free style template
   > jenkins to clone the repo: https://github.com/Sonal0409/DevOpsClassCodes.git
   > SCM --> git--> give repo name
   > go to build --> select invoke top level maven target ---> 
     > maven version : mymaven
       goal : pmd:pmd

this plugin creates a PMD site report based on the rulesets and configuration set in the plugin. 
It can also generate a pmd output file aside from the site report in any of the following formats: xml, csv or txt.
  
 > execute the desired maven command to perform maven build step
   > save the job --> build job
   
   > code files will be in your workspace

   > pmd.xml report will be in target folder
   > report localtion : target/pmd.xml

to convert the report in to a trend report--> warning next generation jenkins plugin

Download a jenkins plugin and use it on a job

ManageJenkins---> Manage Plugins --> avaibale--> search for warning next generation--> select the plugin--> instakll without restart


Job3:

> create a new job--> give a name 3.unitTest --> free style template
   > jenkins to clone the repo: https://github.com/Sonal0409/DevOpsClassCodes.git
   > SCM --> git--> give repo name
   > go to build --> select invoke top level maven target ---> 
     > maven version : mymaven
       goal : test
   > execute the desired maven command to perform maven build step
   > save the job --> build job
   
   > code files will be in your workspace

   > test reports  will be in target folder
   > surefire reports -- .xml format
   > location of test reports : target/surefire-reports/*.xml
convert the reports into tred reports
jenkins plugin --> junit plugin --> already available


Job4:
The report generated by this plugin is the result of executing the Cobertura tool against your compiled classes to help you determine how well the unit testing and integration testing efforts have been, 
and can then be used to identify which parts of your Java program are lacking test coverage.



> create a new job--> give a name 4.codecoverage --> free style template
   > jenkins to clone the repo: https://github.com/Sonal0409/DevOpsClassCodes.git
   > SCM --> git--> give repo name
   > go to build --> select invoke top level maven target ---> 
     > maven version : mymaven
       goal : cobertura:cobertura -Dcobertura.report.format=xml
   > execute the desired maven command to perform maven build step
   > save the job --> build job
   
   > code files will be in your workspace

   > test reports  will be in target folder
   > coverage reports -- coverage.xml
   > location of test reports : target/site/cobertura/coverage.xml

Covert the xml report into trend report

download jenkins plugin --> cobertura plugin

Job-->configure-->post build action ---> Publish Cobertura Coverage Report

path -> target/site/cobertura/coverage.xml


to view all the job as an upstream and downstream pipeline

download a plugin --> build pipeline plugin
This plugin renders upstream and downstream connected jobs that typically form a build pipeline.
 In addition, it offers the ability to define manual triggers for jobs that require intervention prior to execution, e.g. an approval process outside of Jenkins.

Use the plugin

Name: BuildPipeline
Type: Build Pipeline View





just 1 job performing all the build steps

  > we can do it by using a pipeline template

   > 1 workspace --> with code files
  > and all the build steps will be executed one afetr the other in the same job
